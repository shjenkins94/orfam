#!/bin/bash

set -eo pipefail

#######################################################################
#	Program: orfam
#	Version: 1.0
#	Author: Zuoyi Jian (jianzuoyi@qq.com)
#######################################################################

# global usage
function usage() {
	echo "
Program: orfam
Version: 1.0
Author: Zuoyi Jian (jianzuoyi@qq.com)

usage:   orfam <command> [options]

command: align 	align FASTA files with tblastn
         func 	identify intact olfactory receptor genes
         pseudo identify pseudo olfactory receptor genes
options: -h 	show this message 
"
}

# source the paths to the binaries used in the script
function source_binaries() {
	BIN=$(cd $(dirname $0);pwd)
	FASTATOOLS=$BIN/fastatools.py
        FINDORF=$BIN/findorf.py
        TM_GAP=$BIN/tm_gap.py
        START_CODON=$BIN/start_codon.py
        PHYLO=$BIN/phylo_tree.py
        ROOT_WITH_OUTGROUP=$BIN/root_with_outgroup.py
        PSEUDOGENE=$BIN/pseudogene.py

	if [[ -e $1 ]]; then
		echo "Sourcing executables from $1 ..."
		source $1
	else
		echo "Config file $1 not found. Attempting to auto-source executables"
		# general
		ORFAM_HOME=$( dirname $(which orfam ) )
		PYTHON=$( which python2.7 || true )
		PARALLEL=$( which parallel || true )
		
		BIOAWK=$( which bioawk || true )
		BEDTOOLS=$( which bedtools || true )

		# alignment
		MAKEBLASTDB=$( which makeblastdb || true )
		TBLASTN=$( which tblastn || true )
		EXONERATE=$( which exonerate || true)
		MAFFT=$( which mafft || true )

		# phylo tree
		MEGACC=$( which megacc || true)
	fi
}

function check_python_modules(){
	PYTHON_TEST=$1
	echo "Checking for required python modules ($PYTHON_TEST)..."

	BIOPYTHON=$($PYTHON_TEST -c "import imp; imp.find_module('Bio')" 2>&1 || true)

	if [[ ! -z "$BIOPYTHON" ]]; then
	 	usage
	 	echo "Error: biopython is not installed for $PYTHON_TEST"
	 	exit 1
	fi 
}

# alignment with tblastn
function align() {
	function align_usage() {
		echo "
usage:	orfam align [options]

options:
  -q FILE 	olfactory receptor proteins (FASTA)
  -s FILE 	subject genome (FASTA)
  -o STR 	output file [.align]
  -e FLOAT	evalue for hits
  -t INT 	threads [1]
  -T DIR 	temp directory [./tmpXXXXXXXX]
  -K FILE 	path to orfam.config file (default: same directory as orfam)
  -v 		verbose
  -h 		show this message
"
	}

	# verify arguments passed in.
	if [[ -z "$2" ]]; then
		align_usage
		exit 1
	fi

	# set defaults
	ORFAM_DIR=$(dirname $0)
	CONFIG="$ORFAM_DIR/orfam.config"
	#CONFIG=""
	OUTPUT=""
	THREADS=1
	TEMP_DIR=""
	VERBOSE=0

	while getopts ":q:s:o:e:t:T:kK:hv" OPTION; do
		case "$OPTION" in
		h)
			align_usage
			exit 1
			;;
		q)
			QUERY="$OPTARG"
			;;
		s)
			SUBJECT="$OPTARG"
			;;
		o)
			OUTPUT="$OPTARG"
			;;
		e)
			EVALUE="$OPTARG"
			;;
		t)
			THREADS="$OPTARG"
			;;
		T)
			TEMP_DIR="$OPTARG"
			;;
		v)
			VERBOSE=1
			;;
		K)
			CONFIG="$OPTARG"
			;;
		k)
			KEEP=1
			;;
		?)
			align_usage
			exit 1
			;;
		esac
	done

	# check the relevant binaries
	source_binaries $CONFIG
	
    if [[ ! -f $BIOAWK ]]; then
        align_usage
        echo -e "Error: bioawk executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
        exit 1
    fi
	if [[ ! -f $MAKEBLASTDB ]]; then
		align_usage
		echo -e "Error: makeblastdb executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $TBLASTN ]]; then
		align_usage
		echo -e "Error: tblastn executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi

	# check that the required files exist
	if [[ ! -f $SUBJECT ]]; then
		align_usage
		echo -e "Error: SUBJECT file $SUBJECT not found.\n"	
		exit 1
	fi
	if [[ ! -f $QUERY ]]; then
		align_usage
		echo -e "Error: olfactory receptor file $QUERY not found.\n"	
		exit 1
	fi
	if [[ -z $OUTPUT ]]; then
		OUTPUT="$(basename $QUERY).tblastn"
	fi
    OUTBASE=$(basename $OUTPUT)
	# make temporary directory
	if [[ -z $TEMP_DIR ]]; then
		TEMP_DIR=$( mktemp -d tmpXXXXXXXX )
	else
		mkdir -p $TEMP_DIR
	fi
	
	if [[ "$?" -ne 0 ]]; then
		echo "Error: $MAKEBLASTDB returned an error;exit now"
		exit 1
	fi
	
	# perform alignment (only uses query sequences with lengths of 250 or more)
	echo "Aligning..."
    if [[ $VERBOSE -eq 1 ]]; then
   		echo "
		$BIOAWK -c fastx 'length(\$2) >= 250 { print \">\"\$1\"\n\"\$2}' $QUERY > $TEMP_DIR/query_length_ge_250aa.fa
		$MAKEBLASTDB -dbtype nucl -in $SUBJECT -out $TEMP_DIR/$(basename $SUBJECT) -title \"ref genome database\" -parse_seqids
		$TBLASTN -db $TEMP_DIR/$(basename $SUBJECT) -query $TEMP_DIR/query_length_ge_250aa.fa -out $TEMP_DIR/${OUTBASE}.tmp -evalue $EVALUE -outfmt 6 -num_threads $THREADS
		mv $TEMP_DIR/${OUTBASE}.tmp $OUTPUT"
    fi

    $BIOAWK -c fastx 'length($2) >= 250 { print ">"$1"\n"$2}' $QUERY > $TEMP_DIR/query_length_ge_250aa.fa
    $MAKEBLASTDB -dbtype nucl -in $SUBJECT -out $TEMP_DIR/$(basename $SUBJECT) -title "ref genome database" -parse_seqids 
	$TBLASTN -db $TEMP_DIR/$(basename $SUBJECT) -query $TEMP_DIR/query_length_ge_250aa.fa -out $TEMP_DIR/${OUTBASE}.tmp -evalue $EVALUE -outfmt 6 -num_threads $THREADS		
	mv $TEMP_DIR/${OUTBASE}.tmp $OUTPUT
	
	if [[ "$?" -ne 0 ]]; then
		echo "Error: $TBLASTN returned an error;exit now"
		exit 1
	fi

	# clean up
	if [[ $KEEP -eq 0 ]]; then
		rm -r $TEMP_DIR
	fi
	
	echo "done."

	# exit cleanly
	exit 0
}

function func() {
	function func_usage() {
		echo "
usage:	orfam func [options]

options:
	-R FILE reference file (fasta) (required)
	-r FILE reference olfactory receptor (fasta) (required)
	-B FILE BED file represents the regions of reference olfactory receptor (required)
	-A FILE tblastn output (tabular) (required)
	-O FILE olfactory receptor for outgroup (fasta) (required)
	-S FILE MAO file, setting used to the construction of phylogenetic tree (generated by megaproto) (required)
	-o STR 	output prefix [required]
	-t INT  threads [1]
	-T DIR 	temp directory [./tmpXXXXXXXX]
	-k 		keep temporary files
	-K FILE path to orfam.config file (default: same directory as orfam)
	-v 		verbose
	-h 		show this message
"
	}

	# check options passed in
	if [[ -z "$2" ]]; then
		func_usage
		exit 1
	fi

	# set defaults
	ORFAM_DIR=$(dirname $0)
	CONFIG=$ORFAM_DIR/orfam.config
	REFERENCE=""
	ALIGNMENT=""
	OR_REF=""
	OR_TM=""
	OUTGROUP=""
	SETTING=""
	OUTPUT=""
	THREADS=1
	TEMP_DIR=""
	KEEP=0
	VERBOSE=0

	while getopts "hR:r:B:A:o:O:S:T:t:kK:v" OPTION; do
		case "$OPTION" in
			h)
				func_usage
				exit 1
				;;
			R)
				REFERENCE="$OPTARG"
				;;
			r)
				OR_REF="$OPTARG"
				;;
			B)
				OR_TM="$OPTARG"
				;;
			A)
				ALIGNMENT="$OPTARG"
				;;
			O)
				OUTGROUP="$OPTARG"
				;;
			S)
				SETTING="$OPTARG"
				;;
			o)
				OUTPUT="$OPTARG"
				;;
			t)
				THREADS="$OPTARG"
				;;
			T)
				TEMP_DIR="$OPTARG"
				;;
			K)
				CONFIG="$OPTARG"
				;;
			v)
				VERBOSE=1
				;;
			k)
				KEEP=1
				;;
		esac
	done

	# check the relevant binaries
	source_binaries $CONFIG
    # check python modules
    check_python_modules $PYTHON
	if [[ ! -f $BIOAWK ]]; then
		func_usage
		echo -e "Error: bioawk executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $BEDTOOLS ]]; then
		func_usage
		echo -e "Error: bedtools executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $FASTATOOLS ]]; then
		func_usage
		echo -e "Error: fastatools executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $MAFFT ]]; then
		func_usage
		echo -e "Error: mafft executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $MEGACC ]]; then
		func_usage
		echo -e "Error: megacc executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $FINDORF ]]; then
		func_usage
		echo -e "Error: findorf.py executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $TM_GAP ]]; then
		func_usage
		echo -e "Error: tm_long_gap.py executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $START_CODON ]]; then
		func_usage
		echo -e "Error: start_codon.py executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $PHYLO ]]; then
		func_usage
		echo -e "Error: phylo.py executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi
	if [[ ! -f $ROOT_WITH_OUTGROUP ]]; then
		func_usage
		echo -e "Error: root_with_outgroup.py executable not found. Please set path in $ORFAM_DIR/orfam.config file\n"
		exit 1
	fi

	if [[ -z $OUTPUT ]]; then
		func_usage
		echo "Error: output file are required.\n"
		exit 1
	fi
	
	OUTBASE=$( basename "$OUTPUT" )
	OUT_BEST_HIT="${OUTBASE}_best_hit.gff"
	OUT_INTACT="${OUTBASE}_intact.fa"

	# check that the blast out files exit
	if [[ ! -f "$ALIGNMENT" ]]; then
		func_usage
		echo -e "Error: blast out file $ALIGNMENT not found."
		exit 1
	fi

	# make temporary directory
	if [[ -z "$TEMP_DIR" ]]; then
		TEMP_DIR=$( mktemp -d tmpXXXXXXXX )
	else
		mkdir -p $TEMP_DIR
	fi

	# Get best hits
	if [[ $VERBOSE -eq 1 ]]; then
		echo "Get best hits..."
	fi
	
	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "
		cat $ALIGNMENT | awk -v OFS='\t' '{ if((\$9<\$10)) { strand=\"+\" } else { strand=\"-\"; tmp=\$10; \$10=\$9; \$9=tmp } print \$2,\"TBLASTN\",\"similarity\",\$9,\$10,\$11,strand,\".\",\"qseqid=\"\$1\";qstart=\"\$7\";qend=\"\$8\";pident=\"\$3\";length=\"\$4\";mismatch=\"\$5\";gapopen=\"\$6\";bitscore=\"\$12 }' \
		| sort -k7,7 -k1,1 -k4n,4 \
		| $BEDTOOLS cluster -s -i /dev/stdin > $TEMP_DIR/blast_hit_clusters.gff
			
		paste $TEMP_DIR/blast_hit_clusters.gff <(cat $TEMP_DIR/blast_hit_clusters.gff | cut -f 9 | cut -f 8 -d ';' | cut -f 2 -d '=') \
		| sort -k10n,10 -k6g,6 -k11gr,11 \
		| awk '!arr[$10]++' | cut -f 1-9 > $TEMP_DIR/${OUTBASE}_best_hit.gff.tmp
		mv $TEMP_DIR/${OUTBASE}_best_hit.gff.tmp $OUT_BEST_HIT
			"
	fi

	# Formats alignment as a GFF file
	# Sorts by strand, subject id and subject start position 
	# Then uses bedtools to create clusters of hits with overlapping bases
	cat $ALIGNMENT | awk -v OFS='\t' '{ if(($9<$10)) { strand="+" } else { strand="-"; tmp=$10; $10=$9; $9=tmp } print $2,"TBLASTN","similarity",$9,$10,$11,strand,".","qseqid="$1";qstart="$7";qend="$8";pident="$3";length="$4";mismatch="$5";gapopen="$6";bitscore="$12 }' \
	| sort -k7,7 -k1,1 -k4n,4 \
	| $BEDTOOLS cluster -s -i /dev/stdin > $TEMP_DIR/blast_hit_clusters.gff
	
	# Adds another column with the bit score for each hit
	# Sorts by cluster, then e-score, then bit score
	# Takes the top hit for each cluster, discards hits with lengths of less than 50
	paste $TEMP_DIR/blast_hit_clusters.gff <(cat $TEMP_DIR/blast_hit_clusters.gff | cut -f 9 | cut -f 8 -d ';' | cut -f 2 -d '=') \
	| sort -k10n,10 -k6g,6 -k11gr,11 \
	| awk '!arr[$10]++' | cut -f 1-9 | awk '($5-$4+1)/3>=50' > $TEMP_DIR/${OUTBASE}_best_hit.gff.tmp
	mv $TEMP_DIR/${OUTBASE}_best_hit.gff.tmp $OUT_BEST_HIT
	
	if [[ "$?" -ne 0 ]]; then
		echo -e "Error: get best hits returned an error; exit now"
		exit 1
	fi

	# criteria 1
	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "Criteria 1: discard hits which length is shorter than 250 aa."
	fi

	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "awk '(\$5-\$4+1)/3>=250' ${OUTBASE}_best_hit.gff > $TEMP_DIR/blast_hits_250_aa.gff"
	fi
	
	awk '($5-$4+1)/3>=250' ${OUTBASE}_best_hit.gff > $TEMP_DIR/blast_hits_250_aa.gff
	
	# criteria 2
	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "Criteria 2: add flanking sequences and find intact ORF (ATG ~ stop codon)"
	fi

	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "
		$PYTHON $FINDORF $REFERENCE $TEMP_DIR/blast_hits_250_aa.gff \
		| $BEDTOOLS getfasta -s -fi $REFERENCE -bed /dev/stdin -fo /dev/stdout \
		| $PYTHON $FASTATOOLS translate /dev/stdin > $TEMP_DIR/open_reading_frame.fa"
	fi
	
	# Uses included python script findorf.py to get potential orfs from all 6 
	# reading frames for each blast hit coordinates
	# Get sequences for those orfs and calls fastatools translate function to 
	# create a protein fasta file of all the orfs
	# DOES THIS CHECK TO MAKE SURE THE ORF MATCHES THE HIT?
	# SO, THIS DOESN'T CHECK IF ORF MATCHES HIT. WORST CASE SCENARIO, EACH HIT RESULTS IN 6 ORFS INSTEAD OF 1
	$PYTHON $FINDORF $REFERENCE $TEMP_DIR/blast_hits_250_aa.gff \
	| $BEDTOOLS getfasta -s -fi $REFERENCE -bed /dev/stdin -fo /dev/stdout \
	| $PYTHON $FASTATOOLS translate /dev/stdin > $TEMP_DIR/open_reading_frame.fa
	
	if [[ "$?" -ne 0 ]]; then
		echo -e "Error: when find Opening Read Frame."
		exit 1
	fi

	# criteria 3
	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "Criteria 3: multiple alignment and exclude or candidates which have long gaps (>=5) within transmembrane regions."
	fi
	
	# this divides the open reading frame file into fastas of 400 or less
	awk -v i=0 -v d=0 "/^>/ && i++%400==0{s=\"$TEMP_DIR/open_reading_frame_\"++d\".fa\"} {print > s}" ${TEMP_DIR}/open_reading_frame.fa
	
	# Cycles through all of the reading frame fasta files
	i=0
	for FASTA in $TEMP_DIR/open_reading_frame_*.fa; do
		i=$((i+1))
		
		# puts the commands to be run in a text file
		# Adds the reference OR to the open reading frames
		# Aligns the sequences with MAFFT
		# Sends alignment along with OR REF and OR REF TM bed file to tm_gap
		# Gets back a GFF file with the start and stop of sequences with intact
		# TM regions. 
		# Sends that to Bedtools to get a fasta from the subject sequence, then 
		# translates the fastas, adds the OR REF, aligns with mafft, and sends
		# to a sequence alighnment fasta.
		echo "
		cat $FASTA $OR_REF \
		| $MAFFT --maxiterate 1000 --genafpair --thread $THREADS /dev/stdin \
		| $PYTHON $TM_GAP --ref_or $OR_REF --ref_or_tm $OR_TM --orf_aln /dev/stdin \
		| $BEDTOOLS getfasta -s -fi $REFERENCE -bed /dev/stdin -fo /dev/stdout \
		| $PYTHON $FASTATOOLS translate /dev/stdin \
		| cat /dev/stdin $OR_REF \
		| $MAFFT --maxiterate 1000 --genafpair --thread $THREADS /dev/stdin > $TEMP_DIR/excluded_long_gap_${i}_aln.fa \
		"
		done > $TEMP_DIR/command.txt
		
	if [[ $VERBOSE -eq 1 ]]; then
		echo "
		cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS"
	fi

	cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS
	rm $TEMP_DIR/open_reading_frame_*.fa
	
	
	if [[ "$?" -ne 0 ]]; then
		echo "Error: criteria 3, exclude sequences with log gaps in transmembrane regions."
		exit 1
	fi
	
	# criteria 4
	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "Criteria 4: assigning a proper initiation codon"
	fi
	
	# Cycles through all the fasta files with intact TM regions
	i=0
	for FASTA in ${TEMP_DIR}/excluded_long_gap_*_aln.fa; do
		i=$((i+1))
		
		#Sends REFERENCE, OR_REF, OR_TM and FASTA to start codon
		echo -e "
		$PYTHON $START_CODON --genome $REFERENCE --or_ref $OR_REF --or_ref_tm $OR_TM --orf_aln $FASTA \
		| $BEDTOOLS getfasta -s -fi $REFERENCE -bed /dev/stdin -fo /dev/stdout \
		| $PYTHON $FASTATOOLS translate /dev/stdin > $TEMP_DIR/assigned_start_codon_${i}.fa.tmp"
	done > $TEMP_DIR/command.txt
	if [[ $VERBOSE -eq 1 ]]; then
		echo "cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS"
	fi
	
	cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS
	cat $TEMP_DIR/assigned_start_codon_*.fa.tmp > $TEMP_DIR/assigned_start_codon.fa
	rm $TEMP_DIR/assigned_start_codon_*.fa.tmp
	
	if [[ "$?" -ne 0 ]]; then
		echo "Error: criteria 4, assigning a proper start codon."
		exit 1
	fi

	# phylogenetic tree
	n=0
	d=0
	awk "/^>/ && n++%200==0{s=\"$TEMP_DIR/assigned_start_codon_aa_\"++d\".fa\"} {print > s}" $TEMP_DIR/assigned_start_codon.fa
	# remove the description of the fasta file
	$BIOAWK -c fastx '{print ">"$1"\n"$2}' $OUTGROUP > "${TEMP_DIR}/outgroup.fa"
	i=0
	for FASTA in ${TEMP_DIR}/assigned_start_codon_aa_*.fa; do
		i=$((i+1))
		echo "
		cat $FASTA $TEMP_DIR/outgroup.fa \
		| $MAFFT --maxiterate 1000 --genafpair --thread $THREADS /dev/stdin > $TEMP_DIR/assigned_start_codon_${i}_aln.fa"
	done > $TEMP_DIR/command.txt
	if [[ $VERBOSE -eq 1 ]]; then
		echo "
		cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS"
	fi
	
	cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS
	rm $TEMP_DIR/assigned_start_codon_aa_*.fa
	
	if [[ "$?" -ne 0 ]]; then
		echo "Error: criteria 4, multiple sequence alignment for construction of phylogenetic tree."
		exit 1
	fi

	# megacc
	cat "${TEMP_DIR}/outgroup.fa" | grep '>' | cut -f 2 -d '>' | awk '{print $0"=outgroup"}' > "${TEMP_DIR}/outgroup.txt"
	i=0
	rm -f $TEMP_DIR/phylo_tree_*
	for FASTA in ${TEMP_DIR}/assigned_start_codon_*_aln.fa; do
		i=$((i+1))
		echo "
		$MEGACC -a $SETTING -d $FASTA -g ${TEMP_DIR}/outgroup.txt -o $TEMP_DIR/phylo_tree_${i}"
	done > ${TEMP_DIR}/command.txt
	
	if [[ $VERBOSE -eq 1 ]]; then
		echo "
		cat ${TEMP_DIR}/command.txt | $PARALLEL -j $THREADS"
	fi
	
	cat ${TEMP_DIR}/command.txt | $PARALLEL -j $THREADS

	# discard non-OR genes that form a clade with the genes of outgroup
	$BIOAWK -c fastx '{print $1}' $OUTGROUP | cut -f 2 -d '>' > ${TEMP_DIR}/outgroup_ids.txt
	i=0
	for NWK in ${TEMP_DIR}/phylo_tree_*.nwk; do
		i=$((i+1))
		echo "
		$PYTHON $PHYLO $NWK ${TEMP_DIR}/outgroup_ids.txt > ${TEMP_DIR}/non_or_within_outgroup_ids_${i}.txt"
	done > ${TEMP_DIR}/command.txt
		
	cat ${TEMP_DIR}/command.txt | $PARALLEL -j $THREADS
		
	$PYTHON $FASTATOOLS exclude $TEMP_DIR/assigned_start_codon.fa <( cat $TEMP_DIR/non_or_within_outgroup_ids_*.txt ) > $OUT_INTACT
	
	if [[ "$?" -ne 0 ]]; then
		echo "Error: criteria 4, construction of phylogenetic tree."
		exit 1
	fi

<<MARK    
	# megacc
	if ! ls | grep "$OUTPUT-intact-.*-rooted.nwk" > /tmp/null; then
		awk -v i=0 -v d=0 "/^>/ && n++%200==0{s=\"$TEMP_DIR/$OUTPUT-intact-split-\"++d\".fa\"} {print > s}" ${OUTBASE}_intact.fa
		i=0
		for FASTA in $TEMP_DIR/$OUTPUT-intact-split-*.fa; do
			i=$((i+1))
			echo "
			cat $FASTA $TEMP_DIR/outgroup.fa \
			| $MAFFT --maxiterate 1000 --genafpair --thread $THREADS /dev/stdin > $TEMP_DIR/$OUTPUT-intact-aln-${i}.fa
			"
		done > $TEMP_DIR/command.txt
		if [[ $VERBOSE -eq 1 ]]; then
			echo "
			cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS"
		fi
		cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS

		i=0
		for FASTA in $TEMP_DIR/$OUTPUT-intact-aln-*.fa; do
			i=$((i+1))
			echo "
			$MEGACC -a $SETTING -d $FASTA -g ${TEMP_DIR}/outgroup.txt -o $TEMP_DIR/$OUTPUT-intact-${i}"
		done > $TEMP_DIR/command.txt
		cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS

		i=0
		for TREE in $TEMP_DIR/$OUTPUT-intact-*.nwk; do
			i=$((i+1))
			echo "
			$PYTHON $ROOT_WITH_OUTGROUP $TREE $TEMP_DIR/outgroup_ids.txt > ${TEMP_DIR}/$OUTPUT-intact-${i}-rooted.nwk"
		done > $TEMP_DIR/command.txt
		cat $TEMP_DIR/command.txt | $PARALLEL -j $THREADS

		rm $TEMP_DIR/$OUTPUT-intact-split-*.fa
	fi

	if [[ "$?" -ne 0 ]]; then
		echo "Error: criteria 4, construction of phylogenetic tree with megacc."
		exit 1
	fi
MARK

	

	echo "done."

	exit 0
}

# identify pseudo genes
function pseudo(){ 
	function pseudo_usage(){
		echo "
usage:	orfam pseudo [options]

options:
	-s FILE subject genome (fasta) (required)
	-q FILE query olfactory receptor proteins (fasta) (required)
	-b FILE best hits (gff) (required)
	-i FILE intact olfactory receptor (fasta) (required)
	-o STR 	output prefix
	-T DIR 	temp directory [./tmpXXXXXXXX]
	-k 		keep temporary files
	-K FILE path to orfam.config file (default: same directory as orfam)
	-v 		verbose
	-h 		show this message"
	}

	# check options passed in
	if [[ -z "$2" ]]; then
		pseudo_usage
		exit 1
	fi

	# set defaults
	ORFAM_DIR=$(dirname $0)
	CONFIG=$ORFAM_DIR/orfam.config
	SUBJECT=""
	QUERY=""
	BEST_HITS=""
	INTACT_GENE=""
	OUTPUT=""
	TEMP_DIR=""
	KEEP=0
	VERBOSE=0

	while getopts "hq:s:R:b:i:o:T:kK:v" OPTION; do
		case "$OPTION" in
			h)
				pseudo_usage
				exit 1
				;;
			s)
				SUBJECT="$OPTARG"
				;;
			q)
				QUERY="$OPTARG"
				;;
			b)
				BEST_HITS="$OPTARG"
				;;
			i)
				INTACT_GENE="$OPTARG"
				;;
			o)
				OUTPUT="$OPTARG"
				;;
			T)
				TEMP_DIR="$OPTARG"
				;;
			K)
				CONFIG="$OPTARG"
				;;
			v)
				VERBOSE=1
				;;
			k)
				KEEP=1
				;;
		esac
	done

	# check the relevant binaries
	source_binaries $CONFIG
	
	# check python modules
	check_python_modules $PYTHON
	
	if [[ ! -f $EXONERATE ]]; then
		pseudo_usage
		echo -e "Error: exonerate executable not found. Please set path in $ORFAM_DIR/orfam.config file."
		exit 1
	fi
	if [[ ! -f $PSEUDOGENE ]]; then
		pseudo_usage
		echo -e "Error: pseudogene.py executable not found. Please set path in $ORFAM_DIR/orfam.config file."
		exit 1
	fi
	
	# check that the required file exit
	if [[ ! -f $SUBJECT ]]; then
		pseudo_usage
		echo -e "Error: reference genome file $SUBJECT not found.\n"
		exit 1
	fi

	if [[ ! -f $QUERY ]]; then
		pseudo_usage
		echo -e "Error: query proteins file $QUERY not found.\n"
		exit 1
	fi

	if [[ ! -f $BEST_HITS ]]; then
		pseudo_usage
		echo -e "Error: best hits file $BEST_HITS not found.\n"
		exit 1
	fi

	if [[ ! -f $INTACT_GENE ]]; then
		pseudo_usage
		echo -e "Error: intact gene file $INTACT_GENE not found.\n"
		exit 1
	fi

	#make temporary directory
	if [[ -z "$TEMP_DIR" ]]; then
		TEMP_DIR=$( mktemp -d tmpXXXXXXXX )
	else
		mkdir -p $TEMP_DIR
	fi

	if [[ $VERBOSE -eq 1 ]]; then
		echo -e "
		$PYTHON $PSEUDOGENE -s $SUBJECT -q $QUERY -b $BEST_HITS -i $INTACT_GENE -T $TEMP_DIR
		"
	fi
	
	$PYTHON $PSEUDOGENE -s $SUBJECT -q $QUERY -b $BEST_HITS -i $INTACT_GENE -o $OUTPUT -T $TEMP_DIR
}

# show usage when there are no arguments.
if [[ -z "$1" ]]; then
	usage
    exit 1
fi

while getopts "h:" OPTION; do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

# call the function
case "$1" in 
    'align')
    	align "${@:2}"
    	;;
    'func')
    	func "${@:2}"
    	;;
    'pseudo')
		pseudo "${@:2}"
		;;
    *)
    	usage
    	echo -e "Error: command \"$1\" is invalid\n"
    	exit 1
esac

## END SCRIPT
